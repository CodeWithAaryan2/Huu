
// Experiment 1: Selection Sort
#include <stdio.h>
int main() {
    int n;
    printf("Enter number of elements: ");
    scanf("%d",&n);
    int a[n];
    printf("Enter %d elements: ", n);
    for(int i=0;i<n;i++) scanf("%d",&a[i]);

    for(int i=0;i<n-1;i++){
        int m=i;
        for(int j=i+1;j<n;j++) if(a[j]<a[m]) m=j;
        int t=a[i]; a[i]=a[m]; a[m]=t;
    }

    printf("Sorted array: ");
    for(int i=0;i<n;i++) printf("%d ",a[i]);
    return 0;
}

// Experiment 2: Insertion Sort
#include <stdio.h>
int main() {
    int n;
    printf("Enter number of elements: ");
    scanf("%d",&n);
    int a[n];
    printf("Enter %d elements: ", n);
    for(int i=0;i<n;i++) scanf("%d",&a[i]);

    for(int i=1;i<n;i++){
        int k=a[i], j=i-1;
        while(j>=0 && a[j]>k) a[j+1]=a[j--];
        a[j+1]=k;
    }

    printf("Sorted array: ");
    for(int i=0;i<n;i++) printf("%d ",a[i]);
    return 0;
}

// Experiment 3: Binary Search
#include <stdio.h>
int bs(int a[],int l,int r,int k){
    while(l<=r){
        int m=(l+r)/2;
        if(a[m]==k) return m;
        if(a[m]<k) l=m+1; else r=m-1;
    }
    return -1;
}
int main(){
    int n,k;
    printf("Enter number of elements: ");
    scanf("%d",&n);
    int a[n];
    printf("Enter %d sorted elements: ", n);
    for(int i=0;i<n;i++) scanf("%d",&a[i]);
    printf("Enter key to search: ");
    scanf("%d",&k);

    int p=bs(a,0,n-1,k);
    if(p==-1) printf("Element not found\n");
    else printf("Element found at index %d\n",p);
    return 0;
}

// Experiment 4: Merge Sort
#include <stdio.h>
void merge(int a[],int l,int m,int r){
    int n1=m-l+1,n2=r-m,L[n1],R[n2];
    for(int i=0;i<n1;i++) L[i]=a[l+i];
    for(int j=0;j<n2;j++) R[j]=a[m+1+j];
    int i=0,j=0,k=l;
    while(i<n1 && j<n2) a[k++]=L[i]<=R[j]?L[i++]:R[j++];
    while(i<n1) a[k++]=L[i++];
    while(j<n2) a[k++]=R[j++];
}
void ms(int a[],int l,int r){
    if(l<r){int m=(l+r)/2; ms(a,l,m); ms(a,m+1,r); merge(a,l,m,r);}
}
int main(){
    int n;
    printf("Enter number of elements: ");
    scanf("%d",&n);
    int a[n];
    printf("Enter %d elements: ", n);
    for(int i=0;i<n;i++) scanf("%d",&a[i]);

    ms(a,0,n-1);

    printf("Sorted array: ");
    for(int i=0;i<n;i++) printf("%d ",a[i]);
    return 0;
}

// Experiment 5: Fractional Knapsack
#include <stdio.h>
#include <stdlib.h>
struct I{int v,w;};
int cmp(const void*a,const void*b){
    double r1=((struct I*)a)->v/(double)((struct I*)a)->w;
    double r2=((struct I*)b)->v/(double)((struct I*)b)->w;
    return r2>r1?1:-1;
}
int main(){
    int n,cap;
    printf("Enter number of items: ");
    scanf("%d",&n);
    printf("Enter knapsack capacity: ");
    scanf("%d",&cap);
    struct I it[n];
    for(int i=0;i<n;i++){
        printf("Enter value and weight for item %d: ", i+1);
        scanf("%d%d",&it[i].v,&it[i].w);
    }

    qsort(it,n,sizeof(struct I),cmp);
    double val=0;
    for(int i=0;i<n && cap;i++){
        if(it[i].w<=cap){val+=it[i].v; cap-=it[i].w;}
        else {val+=it[i].v*(double)cap/it[i].w; break;}
    }
    printf("Maximum value = %.2f\n",val);
    return 0;
}
